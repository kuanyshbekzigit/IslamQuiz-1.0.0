#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
IslamQuiz - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏—Å–ª–∞–º —Ç—É—Ä–∞–ª—ã –±—ñ–ª—ñ–º–¥—ñ —Ç–µ–∫—Å–µ—Ä—É–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.
–ë–æ—Ç –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä –∂—ñ–±–µ—Ä–µ–¥—ñ, –∂–∞—É–∞–ø—Ç–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞–π–¥—ã –∂”ô–Ω–µ “±–ø–∞–π–ª–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ–π–¥—ñ.
"""

import json
import logging
import random
import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union, Any

import pytz
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Poll,
    ChatMemberUpdated,
    ChatMember,
    Message,
    User,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    PollAnswerHandler,
    ChatMemberHandler,
    CallbackQueryHandler,
    AIORateLimiter,
    JobQueue,
    MessageHandler,
    filters,
)

# –õ–æ–≥–≥–µ—Ä –±–∞–ø—Ç–∞—É
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞–ª–∞—Ä
TOKEN = "7956214041:AAG8U68UhPLWUAKoNiB7t11GFWJ0OrioEFc"  # –ë–æ—Ç—ã“£—ã–∑–¥—ã“£ —Ç–æ–∫–µ–Ω—ñ–Ω –æ—Å—ã–Ω–¥–∞ –æ—Ä–Ω–∞—Ç—ã“£—ã–∑
# –ê—Å—Ç–∞–Ω–∞ —É–∞“õ—ã—Ç –±–µ–ª–¥–µ—É—ñ
TIMEZONE = pytz.timezone("Asia/Almaty")

# –ì–ª–æ–±–∞–ª—å–¥—ã“õ –∞–π–Ω—ã–º–∞–ª—ã–ª–∞—Ä
active_polls = {}
user_scores = {}
daily_participants = set()

# –¢–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ
TOPICS = {
    "aqida": "–ê“õ–∏–¥–∞",
    "fiqh": "–§–∏“õ“ª",
    "sira": "–°–∏—Ä–∞",
    "quran": "“ö“±—Ä–∞–Ω",
    "hadis": "–•–∞–¥–∏—Å",
    "adab": "”ò–¥–µ–ø",
    # –ñ–∞“£–∞ —ñ–ª—ñ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä—ã
    "ilim_aqida": "–ê“õ–∏–¥–∞ - –ò—Å–ª–∞–º–Ω—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ —Å–µ–Ω—ñ–º –∂“Ø–π–µ—Å—ñ",
    "ilim_fiqh": "–§–∏“õ“ª - –ò—Å–ª–∞–º “õ“±“õ—ã“ì—ã",
    "ilim_akhlaq": "–ê—Ö–ª–∞“õ - –ò—Å–ª–∞–º–¥–∞“ì—ã –º—ñ–Ω–µ–∑-“õ“±–ª—ã“õ –Ω–æ—Ä–º–∞–ª–∞—Ä—ã",
    "ilim_sira": "–°–∏—Ä–∞ - –ü–∞–π“ì–∞–º–±–∞—Ä—ã–º—ã–∑–¥—ã“£ (Ô∑∫) ”©–º—ñ—Ä–±–∞—è–Ω—ã",
    "ilim_quran": "“ö“±—Ä–∞–Ω –∂”ô–Ω–µ —Ç”ô–ø—Å—ñ—Ä - “ö“±—Ä–∞–Ω –ö”ô—Ä—ñ–º –∂”ô–Ω–µ –æ–Ω—ã“£ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ—Å—ñ"
}

# –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä
def get_main_keyboard():
    """–ù–µ–≥—ñ–∑–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä —Ç–∞“õ—Ç–∞—Å—ã–Ω –∂–∞—Å–∞—É"""
    keyboard = [
        [KeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
        [KeyboardButton("–ú–µ–Ω—ñ“£ –Ω”ô—Ç–∏–∂–µ–º"), KeyboardButton("–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_topic_keyboard():
    keyboard = []
    for topic_id, topic_name in TOPICS.items():
        keyboard.append([InlineKeyboardButton(topic_name, callback_data=f"topic_{topic_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

# –°“±—Ä–∞“õ—Ç–∞—Ä –±–∞–∑–∞—Å—ã–Ω –∂“Ø–∫—Ç–µ—É
def load_questions() -> List[Dict]:
    """–°“±—Ä–∞“õ—Ç–∞—Ä –±–∞–∑–∞—Å—ã–Ω JSON —Ñ–∞–π–ª—ã–Ω–∞–Ω –∂“Ø–∫—Ç–µ—É"""
    try:
        with open("questions.json", "r", encoding="utf-8") as file:
            questions = json.load(file)
        return questions
    except FileNotFoundError:
        logging.error("questions.json —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã")
        return []

# “∞–ø–∞–π–ª–∞—Ä –±–∞–∑–∞—Å—ã–Ω –∂“Ø–∫—Ç–µ—É –∂”ô–Ω–µ —Å–∞“õ—Ç–∞—É
def load_scores() -> Dict:
    """“∞–ø–∞–π–ª–∞—Ä –±–∞–∑–∞—Å—ã–Ω JSON —Ñ–∞–π–ª—ã–Ω–∞–Ω –∂“Ø–∫—Ç–µ—É"""
    try:
        with open("scores.json", "r", encoding="utf-8") as file:
            scores = json.load(file)
        return scores
    except FileNotFoundError:
        return {}

def save_scores(scores: Dict) -> None:
    """“∞–ø–∞–π–ª–∞—Ä –±–∞–∑–∞—Å—ã–Ω JSON —Ñ–∞–π–ª—ã–Ω–∞ —Å–∞“õ—Ç–∞—É"""
    with open("scores.json", "w", encoding="utf-8") as file:
        json.dump(scores, file, ensure_ascii=False, indent=4)

# –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–¥–∞—Ä—ã–Ω—ã“£ —Ç—ñ–∑—ñ–º—ñ (–º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω)
REQUIRED_CHANNELS = [
    {"username": "kuanyshbekzhigit", "name": "“ö—É–∞–Ω—ã—à –ë–µ–∫–∂—ñ–≥—ñ—Ç"},
    {"username": "davidsuragan", "name": "–î”ô—É—ñ—Ç –°“±—Ä–∞“ì–∞–Ω"}
]

# –ê—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É–¥—ñ “õ–∞—Ç–∞“£ —Ç–µ–∫—Å–µ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
async def check_user_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –º—ñ–Ω–¥–µ—Ç—Ç—ñ –∫–∞–Ω–∞–ª–¥–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω—ñ–Ω “õ–∞—Ç–∞“£ —Ç–µ–∫—Å–µ—Ä—É"""
    
    # –¢–µ–∫—Å–µ—Ä—É –∂—É—Ä–Ω–∞–ª—ã–Ω –∂–∞–∑—É
    logging.info("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É")
    
    # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã–Ω –∞–ª—É
    user_id = update.effective_user.id
    
    # –¢—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω –∞—Ä–Ω–∞–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ
    not_subscribed = []
    
    # –¢—ñ—Ä–∫–µ–ª—É –º”ô—Ä—Ç–µ–±–µ—Å—ñ (”ô–¥–µ–ø–∫—ñ: False)
    subscribed_to_all = True
    
    for channel in REQUIRED_CHANNELS:
        try:
            # –ê—Ä–Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            chat_username = channel['username']
            
            # –ê—Ä–Ω–∞–Ω—ã –∞–ª—É
            try:
                chat = await context.bot.get_chat(f"@{chat_username}")
                chat_id = chat.id
                
                # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º“Ø—à–µ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
                try:
                    # getChat_member API ”ô–¥—ñ—Å—ñ–Ω —à–∞“õ—ã—Ä—É
                    member = await context.bot.get_chat_member(chat_id, user_id)
                    
                    # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º”ô—Ä—Ç–µ–±–µ—Å—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
                    # 'creator', 'administrator', 'member' - —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω
                    # 'left', 'kicked', 'restricted' - —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω
                    status = member.status
                    
                    logging.info(f"–ê—Ä–Ω–∞: {chat_username}, –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã: {user_id}, –ú”ô—Ä—Ç–µ–±–µ: {status}")
                    
                    # –¢—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω –º”ô—Ä—Ç–µ–±–µ–ª–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—É
                    if status not in ['creator', 'administrator', 'member']:
                        not_subscribed.append(channel)
                        subscribed_to_all = False
                        logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} –∞—Ä–Ω–∞“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω: {chat_username}")
                
                except Exception as e:
                    # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º“Ø—à–µ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É “õ–∞—Ç–µ—Å—ñ
                    logging.error(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –º“Ø—à–µ–ª—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É “õ–∞—Ç–µ—Å—ñ: {e}")
                    not_subscribed.append(channel)
                    subscribed_to_all = False
                    
            except Exception as e:
                # –ê—Ä–Ω–∞–Ω—ã –∞–ª—É “õ–∞—Ç–µ—Å—ñ
                logging.error(f"–ê—Ä–Ω–∞–Ω—ã –∞–ª—É “õ–∞—Ç–µ—Å—ñ: {e}")
                not_subscribed.append(channel)
                subscribed_to_all = False
        
        except Exception as e:
            # –ñ–∞–ª–ø—ã “õ–∞—Ç–µ
            logging.error(f"–ê—Ä–Ω–∞ —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–∞–ª–ø—ã “õ–∞—Ç–µ: {e}")
            not_subscribed.append(channel)
            subscribed_to_all = False
    
    # –ï–≥–µ—Ä –±–∞—Ä–ª—ã“õ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –±–æ–ª—Å–∞
    if subscribed_to_all:
        logging.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} –±–∞—Ä–ª—ã“õ “õ–∞–∂–µ—Ç—Ç—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω")
        return True
    
    # –ë–∞—Ä–ª—ã“õ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω –∞—Ä–Ω–∞–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É
    channel_links = []
    for channel in not_subscribed:
        # HTML —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ —Å—ñ–ª—Ç–µ–º–µ –∂–∞—Å–∞—É
        link = f"<a href='https://t.me/{channel['username']}'>{channel['name']}</a>"
        channel_links.append(link)
    
    # –•–∞–±–∞—Ä–ª–∞–º–∞ –º”ô—Ç—ñ–Ω—ñ
    channels_text = "\n".join(channel_links)
    message_text = (
        "üì¢ <b>–ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑!</b>\n\n"
        "–ë“±–ª –±–æ—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω <b>–º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ</b> –∫–µ–ª–µ—Å—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—É “õ–∞–∂–µ—Ç:\n\n"
        f"{channels_text}\n\n"
        "–¢—ñ—Ä–∫–µ–ª–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω ¬´<b>‚úÖ –¢–µ–∫—Å–µ—Ä—É</b>¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑."
    )
    
    # –¢—ñ—Ä–∫–µ–ª—É –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã–Ω –∂–∞—Å–∞—É
    keyboard = []
    
    # ”ò—Ä –∞—Ä–Ω–∞ “Ø—à—ñ–Ω —Ç—ñ—Ä–∫–µ–ª—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
    for channel in not_subscribed:
        button = [InlineKeyboardButton(
            f"üì¢ {channel['name']} –∞—Ä–Ω–∞—Å—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª—É", 
            url=f"https://t.me/{channel['username']}"
        )]
        keyboard.append(button)
    
    # –¢–µ–∫—Å–µ—Ä—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
    keyboard.append([InlineKeyboardButton("–¢–µ–∫—Å–µ—Ä—É", callback_data="check_subscription")])
    
    # –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä —Ç–∞“õ—Ç–∞—Å—ã–Ω –∂–∞—Å–∞—É
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É (callback –Ω–µ–º–µ—Å–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ —Ç“Ø—Ä—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã)
    if update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.message.edit_text(
                message_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"Callback —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂–∞“£–∞—Ä—Ç—É “õ–∞—Ç–µ—Å—ñ: {e}")
            # –ë“±—Ä—ã–Ω“ì—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–æ—é –∂”ô–Ω–µ –∂–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
            try:
                await update.callback_query.message.delete()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
    else:
        try:
            await update.message.reply_text(
                message_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É “õ–∞—Ç–µ—Å—ñ: {e}")
            # –¢—ñ–∫–µ–ª–µ–π —á–∞—Ç“õ–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
    
    return False

# –ë–æ—Ç –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–æ—Ç –±–∞—Å—Ç–∞—É –∫–æ–º–∞–Ω–¥–∞—Å—ã"""
    try:
        # ‚ö†Ô∏è –ë“∞–î–ê–ù –ö–ï–ô–Ü–ù–ì–Ü –ö–ï–ó-–ö–ï–õ–ì–ï–ù ”ò–†–ï–ö–ï–¢ “Æ–®–Ü–ù –ê–†–ù–ê–õ–ê–†“í–ê –¢–Ü–†–ö–ï–õ–£–î–Ü “ö–ê–¢–ê“¢ –¢–ï–ö–°–ï–†–£
        logging.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ: {update.effective_user.id}")
        if not await check_user_subscription(update, context):
            logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {update.effective_user.id} –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–π /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ")
            return
        
        # “ö–∞—Ä—Å—ã –∞–ª—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
        welcome_text = (
            "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! üåô\n\n"
            "*IslamQuiz* –±–æ—Ç—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n\n"
            "–ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã –∏—Å–ª–∞–º –¥—ñ–Ω—ñ–Ω—ñ“£ ”ô—Ä —Ç“Ø—Ä–ª—ñ —Å–∞–ª–∞–ª–∞—Ä—ã –±–æ–π—ã–Ω—à–∞ –±—ñ–ª—ñ–º—ñ–Ω—ñ–∑–¥—ñ —Ç–µ–∫—Å–µ—Ä–µ –∞–ª–∞—Å—ã–∑.\n\n"
            "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã–ø –±–æ—Ç–ø–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ–π –∞–ª–∞—Å—ã–∑:"
        )
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
        await update.message.reply_text(
            welcome_text, 
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"/start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        await update.message.reply_text(f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}")

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ —Å“±—Ä–∞—Ç—É –∫–æ–º–∞–Ω–¥–∞—Å—ã"""
    try:
        # ‚ö†Ô∏è –ë“∞–î–ê–ù –ö–ï–ô–Ü–ù–ì–Ü –ö–ï–ó-–ö–ï–õ–ì–ï–ù ”ò–†–ï–ö–ï–¢ “Æ–®–Ü–ù –ê–†–ù–ê–õ–ê–†“í–ê –¢–Ü–†–ö–ï–õ–£–î–Ü “ö–ê–¢–ê“¢ –¢–ï–ö–°–ï–†–£
        logging.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã /quiz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ: {update.effective_user.id}")
        if not await check_user_subscription(update, context):
            logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {update.effective_user.id} –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–π /quiz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ")
            return
        
        questions = load_questions()
        question_data = random.choice(questions)
        
        await send_quiz(context, update.effective_chat.id, question_data)
        
        await update.message.reply_text(
            "–°—ñ–∑–≥–µ –∞—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω! –ê–ª–ª–∞ —ñ—Å—ñ“£—ñ–∑–≥–µ –±–µ—Ä–µ–∫–µ –±–µ—Ä—Å—ñ–Ω! üéØ",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logging.error(f"/quiz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        await update.message.reply_text(f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}")

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù”ô—Ç–∏–∂–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É –∫–æ–º–∞–Ω–¥–∞—Å—ã"""
    try:
        # ‚ö†Ô∏è –ë“∞–î–ê–ù –ö–ï–ô–Ü–ù–ì–Ü –ö–ï–ó-–ö–ï–õ–ì–ï–ù ”ò–†–ï–ö–ï–¢ “Æ–®–Ü–ù –ê–†–ù–ê–õ–ê–†“í–ê –¢–Ü–†–ö–ï–õ–£–î–Ü “ö–ê–¢–ê“¢ –¢–ï–ö–°–ï–†–£
        logging.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã /score –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ: {update.effective_user.id}")
        if not await check_user_subscription(update, context):
            logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {update.effective_user.id} –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–π /score –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ")
            return
        
        scores = load_scores()
        user_id = str(update.effective_user.id)
        
        if user_id in scores:
            if isinstance(scores[user_id], dict):
                score_value = scores[user_id]["total"]
            else:
                score_value = scores[user_id]
            message = f"*–°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ“£—ñ–∑:*\n\n–î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {score_value}"
        else:
            message = "–°—ñ–∑ ”ô–ª—ñ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ “õ–∞—Ç—ã—Å–ø–∞–¥—ã“£—ã–∑"
            
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"/score –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        await update.message.reply_text(f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}")

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É –∫–æ–º–∞–Ω–¥–∞—Å—ã"""
    try:
        # ‚ö†Ô∏è –ë“∞–î–ê–ù –ö–ï–ô–Ü–ù–ì–Ü –ö–ï–ó-–ö–ï–õ–ì–ï–ù ”ò–†–ï–ö–ï–¢ “Æ–®–Ü–ù –ê–†–ù–ê–õ–ê–†“í–ê –¢–Ü–†–ö–ï–õ–£–î–Ü “ö–ê–¢–ê“¢ –¢–ï–ö–°–ï–†–£
        logging.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã /leaderboard –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ: {update.effective_user.id}")
        if not await check_user_subscription(update, context):
            logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {update.effective_user.id} –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–π /leaderboard –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä–¥—ñ")
            return
        
        scores = load_scores()
        
        if not scores:
            await update.message.reply_text("”ò–∑—ñ—Ä—à–µ –µ—à–∫—ñ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ “õ–∞—Ç—ã—Å–ø–∞“ì–∞–Ω")
            return
        
        # –ñ–∞“£–∞ —Ñ–æ—Ä–º–∞—Ç –ø–µ–Ω –µ—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç—Ç—ã ”©“£–¥–µ—É
        processed_scores = {}
        for user_id, score in scores.items():
            if isinstance(score, dict):
                processed_scores[user_id] = score["total"]
            else:
                processed_scores[user_id] = score
        
        sorted_scores = sorted(processed_scores.items(), key=lambda x: x[1], reverse=True)
        
        message = "*üèÜ “Æ–∑–¥—ñ–∫ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä:*\n\n"
        for i, (user_id, score) in enumerate(sorted_scores[:10], 1):
            try:
                user = await context.bot.get_chat(int(user_id))
                name = user.first_name
            except:
                name = "–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç—ã—Å—É—à—ã"
            message += f"{i}. {name}: {score} “±–ø–∞–π\n"
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"/leaderboard –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        await update.message.reply_text(f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}")

# –°“±—Ä–∞“õ—Ç–∞—Ä –∂—ñ–±–µ—Ä—É –ª–æ–≥–∏–∫–∞—Å—ã
async def send_quiz(context: ContextTypes.DEFAULT_TYPE, chat_id: int, question_data: Dict) -> None:
    """–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É"""
    try:
        # –°“±—Ä–∞“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∫”©—à—ñ—Ä—É—ñ–Ω –∂–∞—Å–∞–π–º—ã–∑, —Ç“Ø–ø–Ω“±—Å“õ–∞—Å—ã–Ω ”©–∑–≥–µ—Ä—Ç–ø–µ—É “Ø—à—ñ–Ω
        data = question_data.copy()
        
        # correct_option_id –∫—ñ–ª—Ç—ñ –∂–æ“õ –±–æ–ª—Å–∞, correct_answer –∏–Ω–¥–µ–∫—Å—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞–º—ã–∑
        if "correct_option_id" not in data:
            # 1-—Ç”ô—Å—ñ–ª: options —Ç—ñ–∑—ñ–º—ñ–Ω–¥–µ–≥—ñ correct_answer –∏–Ω–¥–µ–∫—Å—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É
            if "correct_answer" in data and "options" in data:
                correct_option = data.get("correct_answer")
                if isinstance(correct_option, str) and correct_option in data["options"]:
                    data["correct_option_id"] = data["options"].index(correct_option)
                elif isinstance(correct_option, int) and 0 <= correct_option < len(data["options"]):
                    data["correct_option_id"] = correct_option
                else:
                    data["correct_option_id"] = 0
            # 2-—Ç”ô—Å—ñ–ª: –µ–≥–µ—Ä –∂–æ“ì–∞—Ä—ã–¥–∞“ì—ã —Ç”ô—Å—ñ–ª “õ–æ–ª–¥–∞–Ω—ã–ª–º–∞—Å–∞, ”ô–¥–µ–ø–∫—ñ 0 –º”ô–Ω—ñ–Ω —Ç–∞“ì–∞–π—ã–Ω–¥–∞–π–º—ã–∑
            else:
                data["correct_option_id"] = 0

        # “ö–∞–∂–µ—Ç—Ç—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∞–ª—É
        question_text = data["question"]
        options = data["options"]
        correct_option_id = int(data["correct_option_id"])
        explanation = data.get("explanation", "–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ –∂–æ“õ")
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏—è —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã (–µ–≥–µ—Ä –±–æ–ª—Å–∞)
        motivation = data.get("motivation", "–ë—ñ–ª—ñ–º - –µ“£ “Ø–ª–∫–µ–Ω –±–∞–π–ª—ã“õ!")
        
        # –¢–∞“õ—ã—Ä—ã–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–µ–≥–µ—Ä –±–æ–ª—Å–∞)
        topic_id = data.get("topic", "")
        
        # –ñ–∞—É–∞–ø —É–∞“õ—ã—Ç—ã (30 —Å–µ–∫—É–Ω–¥)
        open_period = 30
        
        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É
        message = await context.bot.send_poll(
            chat_id=chat_id,
            question=question_text,
            options=options,
            type=Poll.QUIZ,
            correct_option_id=correct_option_id,
            open_period=open_period,
            explanation=explanation,
            is_anonymous=False
        )
        
        # –°–∞—É–∞–ª–Ω–∞–º–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –º–µ–Ω —á–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã–Ω —Å–∞“õ—Ç–∞—É
        poll_id = message.poll.id
        
        # –ß–∞—Ç“õ–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞—É
        context.bot_data.setdefault("quiz_data", {})[poll_id] = {
            "chat_id": chat_id,
            "message_id": message.message_id,
            "correct_option_id": correct_option_id,
            "options": options,
            "question": question_text,
            "explanation": explanation,
            "motivation": motivation,
            "topic_id": topic_id
        }
        
        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∞—è“õ—Ç–∞–ª“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∂—ñ–±–µ—Ä—É
        job_name = f"poll_{poll_id}"
        context.job_queue.run_once(
            send_explanation,
            when=open_period + 2,
            data=poll_id,
            name=job_name
        )
    except Exception as e:
        logging.error(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
        )

async def send_explanation(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î“±—Ä—ã—Å –∂–∞—É–∞–ø –ø–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∂—ñ–±–µ—Ä—É"""
    try:
        job = context.job
        poll_id = job.data
        
        # quiz_data –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω–µ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É
        quiz_data = context.bot_data.get("quiz_data", {}).get(poll_id)
        
        if not quiz_data:
            logging.error(f"Poll ID {poll_id} “Ø—à—ñ–Ω quiz_data —Ç–∞–±—ã–ª–º–∞–¥—ã")
            return
        
        chat_id = quiz_data["chat_id"]
        correct_option_id = quiz_data["correct_option_id"]
        options = quiz_data["options"]
        explanation = quiz_data.get("explanation", "–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ –∂–æ“õ")
        motivation = quiz_data.get("motivation", "–ë—ñ–ª—ñ–º - –µ“£ “Ø–ª–∫–µ–Ω –±–∞–π–ª—ã“õ!")
        
        # –î“±—Ä—ã—Å –∂–∞—É–∞–ø
        correct_option = options[correct_option_id]
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ “õ“±—Ä—É
        text = (
            f"*–î“±—Ä—ã—Å –∂–∞—É–∞–ø:* {correct_option}\n\n"
            f"*–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ:*\n{explanation}\n\n"
            f"{motivation}"
        )
        
        # –ñ–∞—É–∞–ø—Ç—ã –∂—ñ–±–µ—Ä—É
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ –±–∞—Ç—ã—Ä–º–∞—Å—ã (–µ–≥–µ—Ä topic_id —Å–∞“õ—Ç–∞–ª“ì–∞–Ω –±–æ–ª—Å–∞)
        if "topic_id" in quiz_data:
            topic_id = quiz_data["topic_id"]
            reply_markup = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ", callback_data=f"next_topic_{topic_id}")
            ]])
            
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ“õ–∞ –∫”©—à—É–≥–µ –¥–∞–π—ã–Ω—Å—ã–∑ –±–∞?",
                reply_markup=reply_markup
            )
    except Exception as e:
        logging.error(f"–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")

# –ñ–∞“£–∞ –º“Ø—à–µ–ª–µ—Ä–¥—ñ “õ–∞—Ä—Å—ã –∞–ª—É
async def greet_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ß–∞—Ç“õ–∞ –∂–∞“£–∞–¥–∞–Ω “õ–æ—Å—ã–ª“ì–∞–Ω –º“Ø—à–µ–ª–µ—Ä–¥—ñ “õ–∞—Ä—Å—ã –∞–ª—É"""
    result = extract_status_change(update.chat_member)
    if result is None:
        return
    
    was_member, is_member = result
    
    if not was_member and is_member:
        # –ñ–∞“£–∞ –º“Ø—à–µ —á–∞—Ç“õ–∞ “õ–æ—Å—ã–ª–¥—ã
        new_member = update.chat_member.new_chat_member.user
        await update.effective_chat.send_message(
            f"–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, {new_member.first_name}! üåô\n\n"
            f"*IslamQuiz* —á–∞—Ç—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n"
            f"–ë“Ø–≥—ñ–Ω–≥—ñ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω—Å—ã–∑ –±–∞?",
            parse_mode=ParseMode.MARKDOWN
        )

def extract_status_change(chat_member_update: ChatMemberUpdated) -> Optional[Tuple[bool, bool]]:
    """–ú“Ø—à–µ–Ω—ñ“£ —Å—Ç–∞—Ç—É—Å—ã–Ω—ã“£ ”©–∑–≥–µ—Ä—É—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É –∫”©–º–µ–∫—à—ñ —Ñ—É–Ω–∫—Ü–∏—è—Å—ã"""
    status_change = chat_member_update.difference().get("status")
    old_is_member, new_is_member = chat_member_update.difference().get("is_member", (None, None))
    
    if status_change is None:
        return None
    
    old_status, new_status = status_change
    was_member = old_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (old_status == ChatMember.RESTRICTED and old_is_member is True)
    is_member = new_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (new_status == ChatMember.RESTRICTED and new_is_member is True)
    
    return was_member, is_member

# –ê–ø—Ç–∞ —Å–∞–π—ã–Ω“ì—ã —Ä–µ–π—Ç–∏–Ω–≥ –∂–∞—Ä–∏—è–ª–∞—É
async def weekly_results(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–ø—Ç–∞ —Å–∞–π—ã–Ω“ì—ã –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –∂–∞—Ä–∏—è–ª–∞—É"""
    # –ë–∞—Ä–ª—ã“õ —á–∞—Ç—Ç–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑ (—á–∞—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∂“Ø–π–µ–¥–µ —Å–∞“õ—Ç–∞—É –∫–µ—Ä–µ–∫)
    # –ë“±–ª –∂–µ—Ä–¥–µ –º—ã—Å–∞–ª “Ø—à—ñ–Ω —Ç–µ–∫ –±—ñ—Ä —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ
    chat_ids = context.bot_data.get("active_chats", [])
    
    if not chat_ids:
        return
    
    scores = load_scores()
    
    # –ê–ø—Ç–∞–ª—ã“õ “±–ø–∞–π–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ —Å“±—Ä—ã–ø—Ç–∞—É
    leaderboard_data = sorted(
        [(user_id, data["weekly"]) for user_id, data in scores.items()],
        key=lambda x: x[1],
        reverse=True
    )[:5]  # –¢–µ–∫ 5 “Ø–∑–¥—ñ–∫
    
    if not leaderboard_data:
        for chat_id in chat_ids:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ë“±–ª –∞–ø—Ç–∞–¥–∞ –µ—à–∫—ñ–º “±–ø–∞–π –∂–∏–Ω–∞“ì–∞–Ω –∂–æ“õ üòî",
                parse_mode=ParseMode.MARKDOWN
            )
        return
    
    text = (
        "*–ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä!* üèÜ\n\n"
        "–ï“£ –∫”©–ø –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä:\n\n"
    )
    
    for i, (user_id, points) in enumerate(leaderboard_data, start=1):
        user_info = await context.bot.get_chat(int(user_id))
        username = user_info.first_name
        
        if i == 1:
            text += f"ü•á {username}: {points} “±–ø–∞–π\n"
        elif i == 2:
            text += f"ü•à {username}: {points} “±–ø–∞–π\n"
        elif i == 3:
            text += f"ü•â {username}: {points} “±–ø–∞–π\n"
        else:
            text += f"{i}. {username}: {points} “±–ø–∞–π\n"
    
    text += "\n–ë–∞—Ä–ª—ã“õ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä“ì–∞ —Ä–∞—Ö–º–µ—Ç! –ñ–∞“£–∞ –∞–ø—Ç–∞–¥–∞ –∂–∞“£–∞ –±—ñ–ª—ñ–º –º–µ–Ω –∂–∞“£–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –∫“Ø—Ç—ñ“£—ñ–∑–¥–µ—Ä! üìö"
    
    # –ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –±–∞—Ä–ª—ã“õ —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—É
    for chat_id in chat_ids:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –ê–ø—Ç–∞–ª—ã“õ “±–ø–∞–π–ª–∞—Ä–¥—ã –Ω”©–ª–¥–µ—É
    for user_id in scores:
        scores[user_id]["weekly"] = 0
    
    save_scores(scores)

# –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
async def daily_quiz(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É"""
    chat_ids = context.bot_data.get("active_chats", [])
    
    if not chat_ids:
        return
    
    questions = load_questions()
    question_data = random.choice(questions)
    
    intro_text = (
        "*–ë“Ø–≥—ñ–Ω–≥—ñ IslamQuiz —Å“±—Ä–∞“ì—ã!* üåô\n\n"
        "“ö“±—Ä–º–µ—Ç—Ç—ñ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä, –∂–∞“£–∞ —Å“±—Ä–∞“õ“õ–∞ –¥–∞–π—ã–Ω –±–æ–ª—ã“£—ã–∑–¥–∞—Ä!\n"
        "–î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä—Å–µ“£—ñ–∑, “±–ø–∞–π –∞–ª–∞—Å—ã–∑. –ñ–∞—É–∞–ø –±–µ—Ä—É —É–∞“õ—ã—Ç—ã: 24 —Å–∞“ì–∞—Ç."
    )
    
    for chat_id in chat_ids:
        await context.bot.send_message(
            chat_id=chat_id,
            text=intro_text,
            parse_mode=ParseMode.MARKDOWN
        )
        await send_quiz(context, chat_id, question_data)

# –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É –∂—ñ–±–µ—Ä—É
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É –∂—ñ–±–µ—Ä—É"""
    chat_ids = context.bot_data.get("active_chats", [])
    
    if not chat_ids:
        return
    
    reminder_text = (
        "üåô *IslamQuiz –µ—Å–∫–µ—Ä—Ç—É—ñ*\n\n"
        "“ö“±—Ä–º–µ—Ç—Ç—ñ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä, –±“Ø–≥—ñ–Ω–≥—ñ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–¥—ñ “±–º—ã—Ç–ø–∞“£—ã–∑!\n"
        "–ë—ñ–ª—ñ–º - –µ“£ “Ø–ª–∫–µ–Ω –±–∞–π–ª—ã“õ! üìö"
    )
    
    for chat_id in chat_ids:
        await context.bot.send_message(
            chat_id=chat_id,
            text=reminder_text,
            parse_mode=ParseMode.MARKDOWN
        )

# –ß–∞—Ç—Ç—ã —Ç—ñ—Ä–∫–µ—É
async def register_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ß–∞—Ç—Ç—ã –±–µ–ª—Å–µ–Ω–¥—ñ —á–∞—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å—É"""
    chat_id = update.effective_chat.id
    active_chats = context.bot_data.setdefault("active_chats", [])
    
    if chat_id not in active_chats:
        active_chats.append(chat_id)
        await update.message.reply_text(
            "–ß–∞—Ç —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ! –ï–Ω–¥—ñ –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä –æ—Å—ã —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            "–ë“±–ª —á–∞—Ç –±“±—Ä—ã–Ω–Ω–∞–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω!",
            parse_mode=ParseMode.MARKDOWN
        )

async def group_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–æ–ø—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±–∞—Å—Ç–∞—É"""
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("üòï –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ —Ç–æ–ø—Ç–∞—Ä–¥–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ!")
        return

    try:
        # –°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É
        questions = load_questions()
        if not questions:
            await update.message.reply_text("‚ùå –°“±—Ä–∞“õ—Ç–∞—Ä –∂“Ø–∫—Ç–µ–ª–º–µ–¥—ñ!")
            return

        # –ö–µ–∑–¥–µ–π—Å–æ“õ —Å“±—Ä–∞“õ —Ç–∞“£–¥–∞—É
        question_data = random.choice(questions)
        
        # –°“±—Ä–∞“õ—Ç—ã —Ñ–æ—Ä–º–∞—Ç—Ç–∞—É
        question_text = f"üìö –°“±—Ä–∞“õ:\n\n{question_data['question']}\n\n"
        options = question_data['options']
        
        # –°–∞—É–∞–ª–Ω–∞–º–∞ –∂—ñ–±–µ—Ä—É
        poll = await context.bot.send_poll(
            chat_id=update.effective_chat.id,
            question=question_text,
            options=options,
            is_anonymous=False,
            type='quiz',
            correct_option_id=question_data['correct_option'],
            explanation=question_data['explanation'],
            open_period=60  # 60 —Å–µ–∫—É–Ω–¥
        )
        
        # –°–∞—É–∞–ª–Ω–∞–º–∞ ID-—Å—ã–Ω —Å–∞“õ—Ç–∞—É
        poll_id = poll.poll.id
        context.bot_data[poll_id] = {
            'question': question_data,
            'chat_id': update.effective_chat.id
        }
        
        # –ë–∞—Å—Ç–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
        await update.message.reply_text(
            "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±–∞—Å—Ç–∞–ª–¥—ã!\n\n"
            "üìù –°“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—É “Ø—à—ñ–Ω 60 —Å–µ–∫—É–Ω–¥ —É–∞“õ—ã—Ç—ã“£—ã–∑ –±–∞—Ä.\n"
            "‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø +1 “±–ø–∞–π\n"
            "‚ùå “ö–∞—Ç–µ –∂–∞—É–∞–ø 0 “±–ø–∞–π\n\n"
            "“ö–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä–¥—ã“£ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ –µ—Å–µ–ø—Ç–µ–ª–µ–¥—ñ!"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã: {str(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–æ—Ç –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã–Ω –∫”©—Ä—Å–µ—Ç—É"""
    help_text = (
        "*IslamQuiz –±–æ—Ç—ã–Ω—ã“£ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã:*\n\n"
        "üë§ *–ñ–µ–∫–µ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:*\n"
        "/start - –±–æ—Ç—Ç—ã –±–∞—Å—Ç–∞—É\n"
        "/quiz - –∂–∞“£–∞ —Å“±—Ä–∞“õ –∞–ª—É\n"
        "/score - ”©–∑ “±–ø–∞–π—ã“£—ã–∑–¥—ã –∫”©—Ä—É\n"
        "/leaderboard - –∫”©—à–±–∞—Å—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—É\n\n"
        "üë• *–¢–æ–ø –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã:*\n"
        "/creategroup - –∂–∞“£–∞ –∂–∞—Ä—ã—Å —Ç–æ–±—ã–Ω –∞—à—É\n"
        "/groupquiz - —Ç–æ–ø—Ç–∞ –∂–∞—Ä—ã—Å –±–∞—Å—Ç–∞—É\n"
        "/register - —Ç–æ–ø—Ç—ã —Ç—ñ—Ä–∫–µ—É (–∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä “Ø—à—ñ–Ω)\n\n"
        "‚ÑπÔ∏è *“ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç:*\n"
        "‚Ä¢ –ñ–∞—É–∞–ø –±–µ—Ä—É —É–∞“õ—ã—Ç—ã: 30 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –î“±—Ä—ã—Å –∂–∞—É–∞–ø: +1 “±–ø–∞–π\n"
        "‚Ä¢ –ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä: –∂–µ–∫—Å–µ–Ω–±—ñ –∫“Ø–Ω—ñ\n"
        "‚Ä¢ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ: —Ç–∞“£“ì—ã 9:00\n"
        "‚Ä¢ –ï—Å–∫–µ—Ä—Ç—É: –∫–µ—à–∫—ñ 18:00\n\n"
        "üìö *–ë—ñ–ª—ñ–º - –µ“£ “Ø–ª–∫–µ–Ω –±–∞–π–ª—ã“õ!*"
    )
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

# –ñ–∞—É–∞–ø—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∞—É–∞–ª–Ω–∞–º–∞“ì–∞ –±–µ—Ä—ñ–ª–≥–µ–Ω –∂–∞—É–∞–ø—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É"""
    poll_answer = update.poll_answer
    poll_id = poll_answer.poll_id
    user_id = str(poll_answer.user.id)
    
    poll_data = context.bot_data.get("quiz_data", {}).get(poll_id)
    if not poll_data:
        return
    
    selected_option = poll_answer.option_ids[0] if poll_answer.option_ids else -1
    correct_option = poll_data["correct_option_id"]
    
    # “∞–ø–∞–π–ª–∞—Ä–¥—ã –∂–∞“£–∞—Ä—Ç—É
    scores = load_scores()
    if isinstance(scores.get(user_id), int):
        # –ï—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç
        scores[user_id] = {"total": scores[user_id], "weekly": 0}
    elif user_id not in scores:
        scores[user_id] = {"total": 0, "weekly": 0}
    
    # –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω—ñ “Ø—à—ñ–Ω “±–ø–∞–π –±–µ—Ä—É
    if selected_option == correct_option:
        scores[user_id]["total"] += 1
        scores[user_id]["weekly"] += 1
        save_scores(scores)
        
        # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
        try:
            chat_id = poll_data.get("chat_id")
            if chat_id:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üéâ –î“±—Ä—ã—Å –∂–∞—É–∞–ø! –ñ–∞—Ä–∞–π—Å—ã“£!\n{poll_data.get('motivation', '–ë—ñ–ª—ñ–º - –µ“£ “Ø–ª–∫–µ–Ω –±–∞–π–ª—ã“õ!')}"
                )
        except Exception as e:
            logging.error(f"–ñ–∞—É–∞–ø —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")

# –¢–∞“õ—ã—Ä—ã–ø —Ç–∞“£–¥–∞—É–¥—ã ”©“£–¥–µ—É
async def handle_topic_selection(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –∫”©—Ä—Å–µ—Ç—É"""
    topic_id = query.data.split("_")[1]
    questions = load_questions()
    
    # –¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã —Å“Ø–∑–≥—ñ–ª–µ—É
    topic_questions = [q for q in questions if q.get("topic") == topic_id]
    
    if not topic_questions:
        await query.message.edit_text(
            f"–ë“±–ª —Ç–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ ”ô–∑—ñ—Ä—à–µ —Å“±—Ä–∞“õ—Ç–∞—Ä –∂–æ“õ.",
            reply_markup=get_topic_keyboard()
        )
        return
    
    # –ö–µ–∑–¥–µ–π—Å–æ“õ —Å“±—Ä–∞“õ —Ç–∞“£–¥–∞—É
    question_data = random.choice(topic_questions)
    
    # correct_option_id –∫—ñ–ª—Ç—ñ –∂–æ“õ –±–æ–ª—Å–∞, –±“±–Ω—ã –¥–∞ —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
    if "correct_option_id" not in question_data:
        correct_option = question_data.get("correct_answer", 0)
        if isinstance(correct_option, str) and correct_option in question_data.get("options", []):
            question_data["correct_option_id"] = question_data["options"].index(correct_option)
        else:
            question_data["correct_option_id"] = 0
    
    # –°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
    await send_quiz(context, query.message.chat_id, question_data)
    
    # –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ —Ç“Ø–π–º–µ—Å—ñ–Ω “õ–æ—Å—É
    await query.message.reply_text(
        f"–¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω! –ñ–∞“õ—Å—ã –±–∞“ì—ã“£ –∫–µ–ª—Å—ñ–Ω! üéØ",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ", callback_data=f"next_topic_{topic_id}")
        ]])
    )

# –•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É"""
    try:
        # ‚ö†Ô∏è –ë“∞–î–ê–ù –ö–ï–ô–Ü–ù–ì–Ü –ö–ï–ó-–ö–ï–õ–ì–ï–ù ”ò–†–ï–ö–ï–¢ “Æ–®–Ü–ù –ê–†–ù–ê–õ–ê–†“í–ê –¢–Ü–†–ö–ï–õ–£–î–Ü “ö–ê–¢–ê“¢ –¢–ï–ö–°–ï–†–£
        logging.info(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–¥–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞: {update.effective_user.id}")
        if not await check_user_subscription(update, context):
            logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {update.effective_user.id} –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–π —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É–≥–µ —Ç—ã—Ä—ã—Å—Ç—ã")
            return
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ –º”ô—Ç—ñ–Ω—ñ–Ω –∞–ª—É
        text = update.message.text
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É
        if text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
            await quiz(update, context)
        elif text == "–ú–µ–Ω—ñ“£ –Ω”ô—Ç–∏–∂–µ–º":
            await score(update, context)
        elif text == "–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä":
            await leaderboard(update, context)
        else:
            await update.message.reply_text(
                "”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –º–µ–Ω —Å—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã —Ç“Ø—Å—ñ–Ω–±–µ–π–º—ñ–Ω. –¢”©–º–µ–Ω–¥–µ–≥—ñ –∫–Ω–æ–ø–∫–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logging.error(f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        try:
            await update.message.reply_text(f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}")
        except:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
            )

# –ö–Ω–æ–ø–∫–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–Ω–æ–ø–∫–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É"""
    try:
        query = update.callback_query
        await query.answer()
        
        # "–¢–µ–∫—Å–µ—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω ”©“£–¥–µ—É
        if query.data == "check_subscription":
            logging.info("–¢–µ–∫—Å–µ—Ä—É –±–∞—Ç—ã—Ä–º–∞—Å—ã –±–∞—Å—ã–ª–¥—ã")
            if await check_user_subscription(update, context):
                try:
                    await query.message.edit_text(
                        "üéâ <b>–ö–µ—Ä–µ–º–µ—Ç, —Å—ñ–∑ –±–∞—Ä–ª—ã“õ “õ–∞–∂–µ—Ç—Ç—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£—ñ–∑!</b>\n\n"
                        "–ï–Ω–¥—ñ –±–æ—Ç—Ç—ã —Ç–æ–ª—ã“õ—Ç–∞–π “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞—Å—ã–∑. –¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:",
                        parse_mode=ParseMode.HTML,
                        reply_markup=get_main_keyboard()
                    )
                except Exception as e:
                    logging.error(f"–¢–µ–∫—Å–µ—Ä—É —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª“ì–∞–Ω —Å–æ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞“£–∞—Ä—Ç—É “õ–∞—Ç–µ—Å—ñ: {e}")
                    try:
                        await query.message.delete()
                    except:
                        pass
                    
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="üéâ <b>–ö–µ—Ä–µ–º–µ—Ç, —Å—ñ–∑ –±–∞—Ä–ª—ã“õ “õ–∞–∂–µ—Ç—Ç—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£—ñ–∑!</b>\n\n"
                             "–ï–Ω–¥—ñ –±–æ—Ç—Ç—ã —Ç–æ–ª—ã“õ—Ç–∞–π “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞—Å—ã–∑. –¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:",
                        parse_mode=ParseMode.HTML,
                        reply_markup=get_main_keyboard()
                    )
            return
        
        # ‚ö†Ô∏è –ë“∞–î–ê–ù –ö–ï–ô–Ü–ù–ì–Ü –ö–ï–ó-–ö–ï–õ–ì–ï–ù ”ò–†–ï–ö–ï–¢ “Æ–®–Ü–ù –ê–†–ù–ê–õ–ê–†“í–ê –¢–Ü–†–ö–ï–õ–£–î–Ü “ö–ê–¢–ê“¢ –¢–ï–ö–°–ï–†–£
        logging.info(f"–ë–∞—Ç—ã—Ä–º–∞ –±–∞—Å—ã–ª–¥—ã: {query.data}")
        if not await check_user_subscription(update, context):
            logging.warning(f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {update.effective_user.id} –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–π –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—É“ì–∞ —Ç—ã—Ä—ã—Å—Ç—ã: {query.data}")
            return
        
        # –ù–µ–≥—ñ–∑–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É
        try:
            if query.data == "quiz":
                # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É
                await send_random_quiz(update, context)
            elif query.data == "score":
                # –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É
                await show_user_score(update, context)
            elif query.data == "leaderboard":
                # –ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É
                await show_leaderboard_list(update, context)
            elif query.data == "back_to_main":
                await query.message.edit_text(
                    "–ù–µ —ñ—Å—Ç–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?",
                    reply_markup=get_main_keyboard()
                )
            elif query.data.startswith("topic_"):
                await handle_topic_selection(query, context)
            elif query.data.startswith("next_topic_"):
                # –ö–µ–ª–µ—Å—ñ —Ç–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ
                topic_id = query.data.split("_")[2]
                logging.info(f"–ö–µ–ª–µ—Å—ñ —Ç–∞“õ—ã—Ä—ã–ø —Å“±—Ä–∞“ì—ã —Å“±—Ä–∞–ª–¥—ã: {topic_id}")
                
                # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –±–æ—Ç–ø–µ–Ω “õ–∞—Ä—ã–º-“õ–∞—Ç—ã–Ω–∞—Å –∂–∞—Å–∞–π –∞–ª–∞—Ç—ã–Ω–¥—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
                try:
                    await send_topic_quiz(update, context, topic_id)
                except Exception as e:
                    logging.error(f"–ö–µ–ª–µ—Å—ñ —Ç–∞“õ—ã—Ä—ã–ø —Å“±—Ä–∞“ì—ã–Ω –∂—ñ–±–µ—Ä—É–¥–µ “õ–∞—Ç–µ: {e}")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
                    )
            else:
                logging.warning(f"–ë–µ–ª–≥—ñ—Å—ñ–∑ –±–∞—Ç—ã—Ä–º–∞: {query.data}")
        except Exception as e:
            logging.error(f"–ë–∞—Ç—ã—Ä–º–∞–Ω—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
            try:
                await query.message.reply_text(f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}")
            except:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"“ö–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
                )
    except Exception as e:
        logging.error(f"–ñ–∞–ª–ø—ã –±–∞—Ç—ã—Ä–º–∞ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")

# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
async def send_random_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–µ–∑–¥–µ–π—Å–æ“õ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É"""
    try:
        # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ “Ø—à—ñ–Ω callback “õ–æ–ª–¥–∞–Ω—É
        questions = load_questions()
        question_data = random.choice(questions)
        
        # correct_option_id –∫—ñ–ª—Ç—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É –∂”ô–Ω–µ “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ “õ–æ—Å—É
        if "correct_option_id" not in question_data:
            correct_option = question_data.get("correct_answer", 0)
            if isinstance(correct_option, str) and correct_option in question_data.get("options", []):
                question_data["correct_option_id"] = question_data["options"].index(correct_option)
            else:
                question_data["correct_option_id"] = 0
        
        # –°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
        if update.callback_query:
            await send_quiz(context, update.callback_query.message.chat_id, question_data)
            await update.callback_query.message.reply_text(
                "–°—ñ–∑–≥–µ –∞—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω! –ñ–∞“õ—Å—ã –±–∞“ì—ã“£ –∫–µ–ª—Å—ñ–Ω! üéØ",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await send_quiz(context, update.message.chat_id, question_data)
            await update.message.reply_text(
                "–°—ñ–∑–≥–µ –∞—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω! –ñ–∞“õ—Å—ã –±–∞“ì—ã“£ –∫–µ–ª—Å—ñ–Ω! üéØ",
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logging.error(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
        )

# –¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É
async def send_topic_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, topic_id: str) -> None:
    """–ë–µ–ª–≥—ñ–ª—ñ —Ç–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É"""
    try:
        # –°“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É
        questions = load_questions()
        
        # –¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑–≥—ñ–ª–µ—É
        topic_questions = [q for q in questions if q.get("topic") == topic_id]
        
        # –¢–µ–∫—Å–µ—Ä—É: —Å“±—Ä–∞“õ—Ç–∞—Ä –±–∞—Ä –º–∞?
        if not topic_questions:
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–ë“±–ª —Ç–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã."
            )
            return
        
        # –ö–µ–∑–¥–µ–π—Å–æ“õ —Å“±—Ä–∞“õ —Ç–∞“£–¥–∞—É
        question_data = random.choice(topic_questions)
        
        # correct_option_id –∫—ñ–ª—Ç—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É –∂”ô–Ω–µ “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ “õ–æ—Å—É
        if "correct_option_id" not in question_data:
            correct_option = question_data.get("correct_answer", 0)
            if isinstance(correct_option, str) and correct_option in question_data.get("options", []):
                question_data["correct_option_id"] = question_data["options"].index(correct_option)
            else:
                question_data["correct_option_id"] = 0
        
        # –¢–∞“õ—ã—Ä—ã–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã–Ω —Å“±—Ä–∞“õ“õ–∞ “õ–æ—Å—É
        question_data["topic"] = topic_id
        
        # ChatID –∞–ª—É
        chat_id = update.effective_chat.id
        
        # –°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
        await send_quiz(context, chat_id, question_data)
        
        # –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ –±–∞—Ç—ã—Ä–º–∞—Å—ã
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ", callback_data=f"next_topic_{topic_id}")
        ]])
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω! –ñ–∞“õ—Å—ã –±–∞“ì—ã“£ –∫–µ–ª—Å—ñ–Ω! üéØ",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
        )

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã “±–ø–∞–π–ª–∞—Ä—ã–Ω –∫”©—Ä—Å–µ—Ç—É
async def show_user_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã “±–ø–∞–π–ª–∞—Ä—ã–Ω –∫”©—Ä—Å–µ—Ç—É"""
    try:
        # –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∞–ª—É
        scores = load_scores()
        user_id = str(update.effective_user.id)
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ –¥–∞–π—ã–Ω–¥–∞—É
        if user_id in scores:
            # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å–µ—Ä—É (–∂–∞“£–∞ –Ω–µ–º–µ—Å–µ –µ—Å–∫—ñ)
            if isinstance(scores[user_id], dict):
                score_value = scores[user_id]["total"]
            else:
                score_value = scores[user_id]
            
            message = f"*–°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ“£—ñ–∑:*\n\n–î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä: {score_value}"
        else:
            message = "–°—ñ–∑ ”ô–ª—ñ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ “õ–∞—Ç—ã—Å–ø–∞–¥—ã“£—ã–∑"
        
        # –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É (callback query –Ω–µ–º–µ—Å–µ message —Ç“Ø—Ä—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã)
        if update.callback_query:
            await update.callback_query.message.edit_text(
                message, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data="back_to_main")
                ]])
            )
        else:
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logging.error(f"“∞–ø–∞–π–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"“∞–ø–∞–π–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
        )

# –ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É
async def show_leaderboard_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É"""
    try:
        scores = load_scores()
        
        if not scores:
            message = "”ò–∑—ñ—Ä—à–µ –µ—à–∫—ñ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ “õ–∞—Ç—ã—Å–ø–∞“ì–∞–Ω"
            
            # Callback query –Ω–µ–º–µ—Å–µ message —Ç“Ø—Ä—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã
            if update.callback_query:
                await update.callback_query.message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data="back_to_main")
                    ]])
                )
            else:
                await update.message.reply_text(message)
            return
        
        # –†–µ–π—Ç–∏–Ω–≥—Ç—ñ –∂–∏–Ω–∞—É
        if any(isinstance(s, dict) for s in scores.values()):
            # –ñ–∞“£–∞ —Ñ–æ—Ä–º–∞—Ç (dict)
            leaderboard_data = sorted(
                [(user_id, data["total"]) for user_id, data in scores.items() if isinstance(data, dict)],
                key=lambda x: x[1],
                reverse=True
            )[:10]  # –¢–µ–∫ 10 “Ø–∑–¥—ñ–∫
        else:
            # –ï—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç (int)
            leaderboard_data = sorted(
                [(user_id, score) for user_id, score in scores.items() if isinstance(score, int)],
                key=lambda x: x[1],
                reverse=True
            )[:10]  # –¢–µ–∫ 10 “Ø–∑–¥—ñ–∫
        
        if not leaderboard_data:
            message = "–†–µ–π—Ç–∏–Ω–≥ –¥–∞–π—ã–Ω–¥–∞—É–¥–∞ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã"
            
            # Callback query –Ω–µ–º–µ—Å–µ message —Ç“Ø—Ä—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã
            if update.callback_query:
                await update.callback_query.message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data="back_to_main")
                    ]])
                )
            else:
                await update.message.reply_text(message)
            return
        
        # –§–æ—Ä–º–∞—Ç—Ç–∞—É
        text = "*–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ* üèÜ\n\n"
        
        for i, (user_id, points) in enumerate(leaderboard_data, start=1):
            try:
                user_info = await context.bot.get_chat(int(user_id))
                username = user_info.first_name
            except:
                username = f"User-{user_id[-4:]}"
            
            if i == 1:
                text += f"ü•á {username}: {points} “±–ø–∞–π\n"
            elif i == 2:
                text += f"ü•à {username}: {points} “±–ø–∞–π\n"
            elif i == 3:
                text += f"ü•â {username}: {points} “±–ø–∞–π\n"
            else:
                text += f"{i}. {username}: {points} “±–ø–∞–π\n"
        
        # Callback query –Ω–µ–º–µ—Å–µ message —Ç“Ø—Ä—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã
        if update.callback_query:
            await update.callback_query.message.edit_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data="back_to_main")
                ]])
            )
        else:
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logging.error(f"–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —Ç—É—ã–Ω–¥–∞–¥—ã: {str(e)}"
        )

# –ù–µ–≥—ñ–∑–≥—ñ —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É"""
    application = Application.builder().token(TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã “õ–æ—Å—É
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", quiz))
    application.add_handler(CommandHandler("score", score))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("groupquiz", group_quiz))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("register", register_chat))
    
    # –ö–Ω–æ–ø–∫–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É
    application.add_handler(CallbackQueryHandler(handle_button))
    
    # –°–∞—É–∞–ª–Ω–∞–º–∞ –∂–∞—É–∞–ø—Ç–∞—Ä—ã–Ω ”©“£–¥–µ—É
    application.add_handler(PollAnswerHandler(handle_poll_answer))
    
    # –•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä
    job_queue = application.job_queue
    job_queue.run_daily(
        daily_quiz,
        time=datetime.time(hour=10, minute=0, tzinfo=TIMEZONE)
    )
    
    # –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ —Å–∞–ª—É
    job_queue.run_daily(
        daily_reminder,
        time=datetime.time(hour=20, minute=0, tzinfo=TIMEZONE)
    )
    
    # –ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä
    job_queue.run_daily(
        weekly_results,
        time=datetime.time(hour=10, minute=0, tzinfo=TIMEZONE),
        days=(6,)  # –°–µ–Ω–±—ñ –∫“Ø–Ω—ñ
    )
    
    # –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 